# Global cache configuration
caches:
  - key: gradle-cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
    paths:
      - ~/.gradle/caches
      - ~/.gradle/wrapper
  - key: android-sdk-34
    paths:
      - $ANDROID_HOME/platforms/android-34
      - $ANDROID_HOME/build-tools/34.0.0

workflows:
  android-release:
    name: Android Release Build
    max_build_duration: 120
    
    environment:
      groups:
        - android_signing
      vars:
        BUILD_TYPE: "release"
        # Use standard environment variables
        ANDROID_HOME: /usr/local/lib/android/sdk
      java: 17

    triggering:
      events:
        - tag
      branch_patterns:
        - pattern: main
          include: true

    scripts:
      - name: Android Environment Setup
        script: |
          # ===== Environment Verification =====
          echo "=== System Environment ==="
          echo "Java version:"
          java -version
          
          # ===== SDK Path Configuration =====
          # Try multiple possible SDK locations
          POSSIBLE_SDK_PATHS=(
            "$ANDROID_HOME"
            "$CM_ANDROID_SDK_ROOT"
            "/usr/local/lib/android/sdk"
            "/opt/android-sdk"
          )
          
          for SDK_PATH in "${POSSIBLE_SDK_PATHS[@]}"; do
            if [ -d "$SDK_PATH" ]; then
              export ANDROID_HOME=$SDK_PATH
              export CM_ANDROID_SDK_ROOT=$SDK_PATH
              break
            fi
          done
          
          if [ ! -d "$ANDROID_HOME" ]; then
            echo "ERROR: Android SDK not found in any standard location"
            echo "Searched paths:"
            printf "  - %s\n" "${POSSIBLE_SDK_PATHS[@]}"
            exit 1
          fi
          
          echo "Using Android SDK at: $ANDROID_HOME"
          echo "SDK contents:"
          ls -la "$ANDROID_HOME" || echo "Could not list SDK contents"
          
          # ===== Tool Discovery =====
          CMDLINE_TOOLS_PATH=$(find "$ANDROID_HOME/cmdline-tools" -name "sdkmanager" 2>/dev/null | head -1)
          if [ -n "$CMDLINE_TOOLS_PATH" ]; then
            export PATH=$PATH:$(dirname "$CMDLINE_TOOLS_PATH"):$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/34.0.0
          else
            echo "WARNING: cmdline-tools not found, trying legacy tools location"
            export PATH=$PATH:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/34.0.0
          fi
          
          # ===== Verify Tools =====
          if ! command -v sdkmanager >/dev/null 2>&1; then
            echo "ERROR: sdkmanager not found in PATH: $PATH"
            exit 1
          fi
          
          # ===== SDK Setup =====
          echo "=== Installing Android Components ==="
          yes | sdkmanager --licenses
          sdkmanager --verbose \
            "platforms;android-34" \
            "build-tools;34.0.0" \
            "platform-tools" \
            "cmdline-tools;latest"

      - name: Build and Sign
        script: |
          # Re-establish environment
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/34.0.0
          
          echo "=== Building Release APK ==="
          ./gradlew clean assemble${BUILD_TYPE}
          
          echo "=== Verifying APK ==="
          apkanalyzer apk summary app/build/outputs/apk/release/app-release.apk

      - name: Security Verification
        script: |
          if grep -r "android:debuggable=\"true\"" app/src/main/AndroidManifest.xml; then
            echo "ERROR: Release build must not be debuggable!"
            exit 1
          fi

    artifacts:
      - app/build/outputs/apk/**/*.apk
      - app/build/outputs/mapping/release/**/mapping.txt

    publishing:
      email:
        recipients:
          - joepk062@gmail.com

notifications:
  email:
    recipients:
      - joepk062@gmail.com